{"ast":null,"code":"const toTimeString = (sec, showMilliSeconds = true) => {\n  sec = parseFloat(sec);\n  let hours = Math.floor(sec / 3600); // get hours\n  let minutes = Math.floor((sec - hours * 3600) / 60); // get minutes\n  let seconds = sec - hours * 3600 - minutes * 60; //  get seconds\n  // add 0 if value < 10; Example: 2 => 02\n  if (hours < 10) {\n    hours = \"0\" + hours;\n  }\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n  let maltissaRegex = /\\..*$/; // matches the decimal point and the digits after it e.g if the number is 4.567 it matches .567\n\n  let millisec = String(seconds).match(maltissaRegex);\n  return hours + \":\" + minutes + \":\" + String(seconds).replace(maltissaRegex, \"\") + (showMilliSeconds ? millisec ? millisec[0] : \"\" : \"\");\n};\nconst readFileAsBase64 = async file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      resolve(reader.result);\n    };\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n  });\n};\nconst download = (url, fileName) => {\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.setAttribute(\"download\", `${fileName + 'trim'}`);\n  link.click();\n};\nexport { toTimeString, readFileAsBase64, download };","map":{"version":3,"names":["toTimeString","sec","showMilliSeconds","parseFloat","hours","Math","floor","minutes","seconds","maltissaRegex","millisec","String","match","replace","readFileAsBase64","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","download","url","fileName","link","document","createElement","href","setAttribute","click"],"sources":["/Users/Macbook/Documents/video-trimmer-git/src/utils/helpers.js"],"sourcesContent":["const toTimeString = (sec, showMilliSeconds = true) => {\n  sec = parseFloat(sec);\n  let hours = Math.floor(sec / 3600); // get hours\n  let minutes = Math.floor((sec - hours * 3600) / 60); // get minutes\n  let seconds = sec - hours * 3600 - minutes * 60; //  get seconds\n  // add 0 if value < 10; Example: 2 => 02\n  if (hours < 10) {\n    hours = \"0\" + hours;\n  }\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n  let maltissaRegex = /\\..*$/; // matches the decimal point and the digits after it e.g if the number is 4.567 it matches .567\n\n  let millisec = String(seconds).match(maltissaRegex);\n  return (\n    hours +\n    \":\" +\n    minutes +\n    \":\" +\n    String(seconds).replace(maltissaRegex, \"\") +\n    (showMilliSeconds ? (millisec ? millisec[0] : \"\") : \"\")\n  );\n};\n\nconst readFileAsBase64 = async (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      resolve(reader.result);\n    };\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n  });\n};\n\nconst download = (url,fileName) => {\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.setAttribute(\"download\",  `${fileName + 'trim'}`);\n  link.click();\n};\n\nexport { toTimeString, readFileAsBase64, download };\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGA,CAACC,GAAG,EAAEC,gBAAgB,GAAG,IAAI,KAAK;EACrDD,GAAG,GAAGE,UAAU,CAACF,GAAG,CAAC;EACrB,IAAIG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACL,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;EACpC,IAAIM,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAC,CAACL,GAAG,GAAGG,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;EACrD,IAAII,OAAO,GAAGP,GAAG,GAAGG,KAAK,GAAG,IAAI,GAAGG,OAAO,GAAG,EAAE,CAAC,CAAC;EACjD;EACA,IAAIH,KAAK,GAAG,EAAE,EAAE;IACdA,KAAK,GAAG,GAAG,GAAGA,KAAK;EACrB;EACA,IAAIG,OAAO,GAAG,EAAE,EAAE;IAChBA,OAAO,GAAG,GAAG,GAAGA,OAAO;EACzB;EACA,IAAIC,OAAO,GAAG,EAAE,EAAE;IAChBA,OAAO,GAAG,GAAG,GAAGA,OAAO;EACzB;EACA,IAAIC,aAAa,GAAG,OAAO,CAAC,CAAC;;EAE7B,IAAIC,QAAQ,GAAGC,MAAM,CAACH,OAAO,CAAC,CAACI,KAAK,CAACH,aAAa,CAAC;EACnD,OACEL,KAAK,GACL,GAAG,GACHG,OAAO,GACP,GAAG,GACHI,MAAM,CAACH,OAAO,CAAC,CAACK,OAAO,CAACJ,aAAa,EAAE,EAAE,CAAC,IACzCP,gBAAgB,GAAIQ,QAAQ,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,GAAI,EAAE,CAAC;AAE3D,CAAC;AAED,MAAMI,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EACvC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAG,MAAM;MACpBJ,OAAO,CAACE,MAAM,CAACG,MAAM,CAAC;IACxB,CAAC;IACDH,MAAM,CAACI,OAAO,GAAGL,MAAM;IACvBC,MAAM,CAACK,aAAa,CAACT,IAAI,CAAC;EAC5B,CAAC,CAAC;AACJ,CAAC;AAED,MAAMU,QAAQ,GAAGA,CAACC,GAAG,EAACC,QAAQ,KAAK;EACjC,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxCF,IAAI,CAACG,IAAI,GAAGL,GAAG;EACfE,IAAI,CAACI,YAAY,CAAC,UAAU,EAAI,GAAEL,QAAQ,GAAG,MAAO,EAAC,CAAC;EACtDC,IAAI,CAACK,KAAK,CAAC,CAAC;AACd,CAAC;AAED,SAASjC,YAAY,EAAEc,gBAAgB,EAAEW,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}